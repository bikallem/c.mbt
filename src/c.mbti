package tonyfettes/c

// Values
let byte : Size

let double : Size

let float : Size

let int : Size

fn moonbit_ffi_make_closure(Nullable[Unit], Nullable[Unit]) -> Nullable[Unit]

fn null[T]() -> Pointer[T]

fn sizeof(Size) -> UInt64

// Types and methods
pub extern type Nullable[_]
impl Nullable {
  is_null[T](Self[T]) -> Bool
  none[T]() -> Self[T]
  of[T](T?) -> Self[T]
  some[T](T) -> Self[T]
  to[T](Self[T]) -> T?
}

type Pointer[_]
impl Pointer {
  add[T : Sized](Self[T], UInt64) -> Self[T]
  cast[T, U](Self[T]) -> Self[U]
  is_null[T](Self[T]) -> Bool
  load[T : Load](Self[T]) -> T
  of_array[T](FixedArray[T]) -> Self[T]
  of_bytes(Bytes) -> Self[Byte]
  of_uint64[T](UInt64) -> Self[T]
  op_equal(Self[Unit], Self[Unit]) -> Bool
  op_get[T : Sized + Load, I : ToUInt64](Self[T], I) -> T
  op_set[T : Sized + Store, I : ToUInt64](Self[T], I, T) -> Unit
  store[T : Store](Self[T], T) -> Unit
  to_uint64[T](Self[T]) -> UInt64
}
impl[T] Eq for Pointer[T]

type Size
impl Size {
  op_get(Self, UInt64) -> Self
}
impl Eq for Size
impl Hash for Size

// Type aliases

// Traits
trait Load
impl Load for Byte
impl Load for Int
impl Load for Float
impl Load for Double

pub(open) trait Sized {
  size() -> UInt64
}
impl Sized for Byte
impl Sized for Int
impl Sized for Float
impl Sized for Double

trait Store
impl Store for Byte
impl Store for Int
impl Store for Float
impl Store for Double

trait ToUInt64
impl ToUInt64 for Int
impl ToUInt64 for Int64
impl ToUInt64 for UInt64

