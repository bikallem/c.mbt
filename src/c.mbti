package tonyfettes/c

// Values
fn is_null[T](Pointer[T]) -> Bool

fn moonbit_ffi_make_closure(Nullable[Unit], Nullable[Unit]) -> Nullable[Unit]

fn none[T]() -> Nullable[T]

fn null[T]() -> Pointer[T]

// Types and methods
type Memory[T]
impl Memory {
  load[T : Sized](Self[T], Int) -> T
  store[T : Sized](Self[T], Int, T) -> Unit
}

pub extern type Nullable[_]
impl Nullable {
  is_null[T](Self[T]) -> Bool
  none[T]() -> Self[T]
  of[T](T?) -> Self[T]
  some[T](T) -> Self[T]
  to[T](Self[T]) -> T?
}

type Pointer[_]
impl Pointer {
  cast[T, U](Self[T]) -> Self[U]
  is_null[T](Self[T]) -> Bool
  load[T : Load](Self[T], offset~ : Int = ..) -> T
  null[T]() -> Self[T]
  op_equal(Self[Unit], Self[Unit]) -> Bool
  op_get[T : Load](Self[T], Int) -> T
  op_set[T : Store](Self[T], Int, T) -> Unit
  store[T : Store](Self[T], offset~ : Int = .., T) -> Unit
}
impl[T] Eq for Pointer[T]

// Type aliases

// Traits
trait Load
impl Load for Byte
impl Load for Int
impl Load for Int16
impl Load for Int64
impl Load for UInt
impl Load for UInt16
impl Load for UInt64
impl Load for Float
impl Load for Double

pub(open) trait Sized {
  sizeof() -> Int
}

trait Store
impl Store for Byte
impl Store for Int
impl Store for Int16
impl Store for Int64
impl Store for UInt
impl Store for UInt16
impl Store for UInt64
impl Store for Float
impl Store for Double

