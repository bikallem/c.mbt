package tonyfettes/c

// Values
let byte : Size

let double : Size

let float : Size

let int : Size

fn is_null[T](Pointer[T]) -> Bool

fn moonbit_ffi_make_closure(Nullable[Unit], Nullable[Unit]) -> Nullable[Unit]

fn null[T]() -> Pointer[T]

fn sizeof(Size) -> UInt64

let uint64 : Size

// Types and methods
pub extern type Nullable[_]
impl Nullable {
  is_null[T](Self[T]) -> Bool
  none[T]() -> Self[T]
  of[T](T?) -> Self[T]
  some[T](T) -> Self[T]
  to[T](Self[T]) -> T?
}

type Pointer[_]
impl Pointer {
  cast[T, U](Self[T]) -> Self[U]
  is_null[T](Self[T]) -> Bool
  load[T : Sized](Self[T]) -> T
  of_array[T](FixedArray[T]) -> Self[T]
  of_bytes(Bytes) -> Self[Byte]
  op_equal(Self[Unit], Self[Unit]) -> Bool
  op_get[T : Sized, I : ToInt](Self[T], I) -> T
  op_set[T : Sized, I : ToInt](Self[T], I, T) -> Unit
  store[T : Sized](Self[T], T) -> Unit
}
impl[T] Eq for Pointer[T]

type Size
impl Size {
  op_get(Self, UInt64) -> Self
}
impl Eq for Size
impl Hash for Size

// Type aliases

// Traits
pub(open) trait Sized {
  size() -> UInt64
}
impl Sized for Byte
impl Sized for Int
impl Sized for UInt64
impl Sized for Float
impl Sized for Double

pub(open) trait ToInt {
  to_int(Self) -> Int
}
impl ToInt for Int
impl ToInt for UInt
impl ToInt for UInt64

